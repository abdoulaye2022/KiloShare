import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../modules/auth/services/auth_service.dart';
import '../modules/notifications/services/firebase_notification_service.dart';
import 'auth_token_service.dart';

/// Service centralis√© pour g√©rer la d√©connexion compl√®te
/// et vider tous les √©tats persist√©s dans l'application
class LogoutService {
  static const FlutterSecureStorage _secureStorage = FlutterSecureStorage(
    aOptions: AndroidOptions(
      encryptedSharedPreferences: true,
    ),
    iOptions: IOSOptions(
      accessibility: KeychainAccessibility.first_unlock_this_device,
    ),
  );

  /// Effectue une d√©connexion compl√®te avec nettoyage de tous les √©tats persist√©s
  static Future<void> performCompleteLogout() async {
    debugPrint('üö™ D√©but de la d√©connexion compl√®te...');
    
    try {
      // 1. D√©connexion via AuthService (appel API + suppression des tokens auth)
      await _performAuthLogout();
      
      // 2. Vider tous les stockages persistants
      await _clearAllPersistedData();
      
      // 3. Nettoyer les services en m√©moire
      await _clearInMemoryStates();
      
      // 4. Nettoyer les notifications
      await _clearNotifications();
      
      debugPrint('‚úÖ D√©connexion compl√®te termin√©e avec succ√®s');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la d√©connexion compl√®te: $e');
      // On continue quand m√™me le nettoyage local m√™me si l'API √©choue
      await _forceLocalCleanup();
    }
  }

  /// √âtape 1: D√©connexion via AuthService
  static Future<void> _performAuthLogout() async {
    debugPrint('üîë D√©connexion AuthService...');
    try {
      final authService = AuthService.instance;
      await authService.logout(); // Appel API + suppression tokens auth
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erreur AuthService logout: $e (continue quand m√™me)');
    }
  }

  /// √âtape 2: Vider tous les stockages persistants
  static Future<void> _clearAllPersistedData() async {
    debugPrint('üóëÔ∏è Nettoyage des donn√©es persist√©es...');
    
    await Future.wait([
      _clearSecureStorage(),
      _clearSharedPreferences(),
    ]);
  }

  /// Nettoyer FlutterSecureStorage
  static Future<void> _clearSecureStorage() async {
    debugPrint('üîê Nettoyage du stockage s√©curis√©...');
    
    try {
      // Lister toutes les cl√©s avant suppression
      final allKeys = await _secureStorage.readAll();
      debugPrint('üìã Cl√©s √† supprimer du stockage s√©curis√©: ${allKeys.keys.toList()}');
      
      // Supprimer toutes les cl√©s importantes
      await Future.wait([
        // Tokens d'authentification
        _secureStorage.delete(key: 'access_token'),
        _secureStorage.delete(key: 'refresh_token'),
        _secureStorage.delete(key: 'token_expires_at'),
        _secureStorage.delete(key: 'user_data'),
        
        // Token FCM
        _secureStorage.delete(key: 'fcm_token'),
        
        // Autres cl√©s potentielles
        _secureStorage.delete(key: 'search_history'),
        _secureStorage.delete(key: 'user_preferences'),
        _secureStorage.delete(key: 'cached_user_data'),
      ]);
      
      // Nettoyage complet pour √™tre s√ªr
      await _secureStorage.deleteAll();
      
      debugPrint('‚úÖ Stockage s√©curis√© nettoy√©');
    } catch (e) {
      debugPrint('‚ùå Erreur nettoyage stockage s√©curis√©: $e');
    }
  }

  /// Nettoyer SharedPreferences
  static Future<void> _clearSharedPreferences() async {
    debugPrint('üìÑ Nettoyage des SharedPreferences...');
    
    try {
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys();
      debugPrint('üìã Cl√©s √† supprimer des SharedPreferences: ${keys.toList()}');
      
      // Supprimer des cl√©s sp√©cifiques importantes
      await Future.wait([
        prefs.remove('auth_token'),
        prefs.remove('user_profile'),
        prefs.remove('app_settings'),
        prefs.remove('search_filters'),
        prefs.remove('trip_cache'),
        prefs.remove('notification_settings'),
      ]);
      
      // Nettoyage complet
      await prefs.clear();
      
      debugPrint('‚úÖ SharedPreferences nettoy√©es');
    } catch (e) {
      debugPrint('‚ùå Erreur nettoyage SharedPreferences: $e');
    }
  }

  /// √âtape 3: Nettoyer les services en m√©moire
  static Future<void> _clearInMemoryStates() async {
    debugPrint('üß† Nettoyage des √©tats en m√©moire...');
    
    try {
      // Nettoyer AuthTokenService
      await AuthTokenService.instance.clearToken();
      
      // R√©initialiser d'autres services si n√©cessaire
      // TODO: Ajouter d'autres services qui ont des √©tats en m√©moire
      
      debugPrint('‚úÖ √âtats en m√©moire nettoy√©s');
    } catch (e) {
      debugPrint('‚ùå Erreur nettoyage √©tats m√©moire: $e');
    }
  }

  /// √âtape 4: Nettoyer les notifications
  static Future<void> _clearNotifications() async {
    debugPrint('üîî Nettoyage des notifications...');
    
    try {
      final notificationService = FirebaseNotificationService();
      
      // Vider toutes les notifications locales
      await notificationService.clearAllNotifications();
      
      // Se d√©sabonner de tous les topics (si on les conna√Æt)
      // TODO: Maintenir une liste des topics auxquels l'utilisateur est abonn√©
      
      debugPrint('‚úÖ Notifications nettoy√©es');
    } catch (e) {
      debugPrint('‚ùå Erreur nettoyage notifications: $e');
    }
  }

  /// Nettoyage local forc√© en cas d'√©chec de l'API
  static Future<void> _forceLocalCleanup() async {
    debugPrint('üö® Nettoyage local forc√©...');
    
    try {
      await _clearAllPersistedData();
      await _clearInMemoryStates();
      await _clearNotifications();
      
      debugPrint('‚úÖ Nettoyage local forc√© termin√©');
    } catch (e) {
      debugPrint('‚ùå Erreur nettoyage local forc√©: $e');
    }
  }

  /// M√©thode de debug pour v√©rifier le nettoyage
  static Future<void> debugVerifyCleanup() async {
    debugPrint('üîç V√©rification du nettoyage...');
    
    try {
      // V√©rifier FlutterSecureStorage
      final secureKeys = await _secureStorage.readAll();
      debugPrint('üîê Cl√©s restantes dans stockage s√©curis√©: ${secureKeys.keys.toList()}');
      
      // V√©rifier SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      final prefKeys = prefs.getKeys();
      debugPrint('üìÑ Cl√©s restantes dans SharedPreferences: ${prefKeys.toList()}');
      
      // V√©rifier AuthTokenService
      final authToken = AuthTokenService.instance.currentToken;
      debugPrint('üîë Token auth restant: ${authToken != null ? "OUI" : "NON"}');
      
      if (secureKeys.isEmpty && prefKeys.isEmpty && authToken == null) {
        debugPrint('‚úÖ Nettoyage v√©rifi√© avec succ√®s');
      } else {
        debugPrint('‚ö†Ô∏è Certaines donn√©es persistent encore');
      }
    } catch (e) {
      debugPrint('‚ùå Erreur v√©rification nettoyage: $e');
    }
  }
}