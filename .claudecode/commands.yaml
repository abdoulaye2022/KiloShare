# Configuration Claude Code Simple
project: KiloShare
description: Application de partage d'espace bagages

# Commandes de base
commands:
  # === SETUP ===
  setup:
    description: "Installation complÃ¨te du projet"
    run: |
      echo "ðŸš€ Setup KiloShare..."
      # Backend
      cd backend
      composer install
      cp .env.example .env
      echo "âœ… Backend installÃ©"
      # Mobile
      cd ../mobile
      flutter pub get
      echo "âœ… Flutter installÃ©"
      # Database
      cd ..
      mysql -u root -p < database/schema.sql
      echo "âœ… Base de donnÃ©es crÃ©Ã©e"

  # === DÃ‰VELOPPEMENT ===
  dev:
    description: "Lancer le dÃ©veloppement"
    run: |
      echo "ðŸ”§ DÃ©marrage des serveurs..."
      # Backend PHP
      cd backend
      php -S localhost:8000 -t public &
      echo "âœ… API disponible sur http://localhost:8000"
      # Flutter
      cd ../mobile
      flutter run

  dev-api:
    description: "Lancer seulement l'API"
    run: |
      cd backend
      php -S localhost:8000 -t public

  dev-mobile:
    description: "Lancer seulement Flutter"
    run: |
      cd mobile
      flutter run

  # === TESTS ===
  test:
    description: "Lancer tous les tests"
    run: |
      echo "ðŸ§ª Tests en cours..."
      cd backend && ./vendor/bin/phpunit
      cd ../mobile && flutter test

  test-api:
    description: "Tester l'API"
    run: |
      cd backend
      ./vendor/bin/phpunit

  test-mobile:
    description: "Tester Flutter"
    run: |
      cd mobile
      flutter test

  # === BUILD ===
  build-android:
    description: "Build APK Android"
    run: |
      cd mobile
      flutter build apk --release
      echo "ðŸ“± APK disponible dans mobile/build/app/outputs/flutter-apk/"

  build-ios:
    description: "Build iOS"
    run: |
      cd mobile
      flutter build ios --release
      echo "ðŸ“± Build iOS terminÃ©"

  # === BASE DE DONNÃ‰ES ===
  db-create:
    description: "CrÃ©er la base de donnÃ©es"
    run: |
      mysql -u root -p < database/schema.sql
      echo "âœ… Base de donnÃ©es crÃ©Ã©e"

  db-seed:
    description: "Ajouter des donnÃ©es de test"
    run: |
      mysql -u root -p kiloshare < database/seed.sql
      echo "âœ… DonnÃ©es de test ajoutÃ©es"

  db-reset:
    description: "RÃ©initialiser la base de donnÃ©es"
    run: |
      mysql -u root -p -e "DROP DATABASE IF EXISTS kiloshare; CREATE DATABASE kiloshare;"
      mysql -u root -p kiloshare < database/schema.sql
      mysql -u root -p kiloshare < database/seed.sql
      echo "âœ… Base de donnÃ©es rÃ©initialisÃ©e"

  # === NETTOYAGE ===
  clean:
    description: "Nettoyer les fichiers temporaires"
    run: |
      rm -rf backend/vendor
      rm -rf mobile/build
      rm -rf mobile/.dart_tool
      echo "ðŸ§¹ Nettoyage terminÃ©"

  # === GÃ‰NÃ‰RATION DE CODE ===
  new-screen:
    description: "CrÃ©er un nouveau screen Flutter"
    args:
      - name
    run: |
      cat > mobile/lib/screens/${name}_screen.dart << 'EOF'
      import 'package:flutter/material.dart';
      
      class ${name^}Screen extends StatefulWidget {
        const ${name^}Screen({Key? key}) : super(key: key);
        
        @override
        State<${name^}Screen> createState() => _${name^}ScreenState();
      }
      
      class _${name^}ScreenState extends State<${name^}Screen> {
        @override
        Widget build(BuildContext context) {
          return Scaffold(
            appBar: AppBar(
              title: Text('${name^}'),
            ),
            body: Center(
              child: Text('${name^} Screen'),
            ),
          );
        }
      }
      EOF
      echo "âœ… Screen ${name} crÃ©Ã©"

  new-controller:
    description: "CrÃ©er un nouveau controller PHP"
    args:
      - name
    run: |
      cat > backend/src/Controllers/${name^}Controller.php << 'EOF'
      <?php
      namespace App\Controllers;
      
      use Psr\Http\Message\ResponseInterface as Response;
      use Psr\Http\Message\ServerRequestInterface as Request;
      
      class ${name^}Controller {
          
          public function index(Request $request, Response $response) {
              $data = ['message' => '${name} endpoint'];
              $response->getBody()->write(json_encode($data));
              return $response->withHeader('Content-Type', 'application/json');
          }
          
          public function show(Request $request, Response $response, $args) {
              $id = $args['id'];
              $data = ['id' => $id, 'name' => '${name}'];
              $response->getBody()->write(json_encode($data));
              return $response->withHeader('Content-Type', 'application/json');
          }
          
          public function store(Request $request, Response $response) {
              $body = $request->getParsedBody();
              // Process data
              $response->getBody()->write(json_encode(['success' => true]));
              return $response->withHeader('Content-Type', 'application/json')->withStatus(201);
          }
      }
      EOF
      echo "âœ… Controller ${name} crÃ©Ã©"

  # === UTILITAIRES ===
  format:
    description: "Formater le code"
    run: |
      cd mobile
      dart format lib/
      cd ../backend
      ./vendor/bin/php-cs-fixer fix src/
      echo "âœ¨ Code formatÃ©"

  analyze:
    description: "Analyser le code"
    run: |
      cd mobile
      flutter analyze
      echo "âœ… Analyse terminÃ©e"